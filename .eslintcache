[{"/home/roque/projects/electron/src/index.js":"1","/home/roque/projects/electron/src/App.js":"2","/home/roque/projects/electron/src/pages/Home.js":"3","/home/roque/projects/electron/src/components/loader/useLoading.js":"4","/home/roque/projects/electron/src/views/editor/hook/LoadProvider.js":"5","/home/roque/projects/electron/src/views/editor/hook/useGlobalOptions.js":"6","/home/roque/projects/electron/src/views/editor/hook/ThemeProvider.js":"7","/home/roque/projects/electron/src/views/editor/utils/misc/EVENTS.js":"8","/home/roque/projects/electron/src/views/editor/utils/misc/randomID.js":"9","/home/roque/projects/electron/src/services/workers/Maker.js":"10","/home/roque/projects/electron/src/components/projects/Projects.jsx":"11","/home/roque/projects/electron/src/components/loader/Loader.jsx":"12","/home/roque/projects/electron/src/views/editor/utils/misc/randomInRange.js":"13","/home/roque/projects/electron/src/components/projects/components/Card.jsx":"14","/home/roque/projects/electron/src/components/db/Database.js":"15"},{"size":195,"mtime":1644186608562,"results":"16","hashOfConfig":"17"},{"size":1487,"mtime":1644188241862,"results":"18","hashOfConfig":"17"},{"size":8502,"mtime":1644188272542,"results":"19","hashOfConfig":"17"},{"size":1423,"mtime":1644177017093,"results":"20","hashOfConfig":"17"},{"size":67,"mtime":1644177017153,"results":"21","hashOfConfig":"17"},{"size":708,"mtime":1644188494202,"results":"22","hashOfConfig":"17"},{"size":68,"mtime":1644177017153,"results":"23","hashOfConfig":"17"},{"size":748,"mtime":1644177017153,"results":"24","hashOfConfig":"17"},{"size":356,"mtime":1644177017153,"results":"25","hashOfConfig":"17"},{"size":4702,"mtime":1644182249752,"results":"26","hashOfConfig":"17"},{"size":2516,"mtime":1644184324562,"results":"27","hashOfConfig":"17"},{"size":1317,"mtime":1644177017093,"results":"28","hashOfConfig":"17"},{"size":99,"mtime":1644177017153,"results":"29","hashOfConfig":"17"},{"size":6420,"mtime":1644184356042,"results":"30","hashOfConfig":"17"},{"size":7173,"mtime":1644185139412,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1kxia49",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/roque/projects/electron/src/index.js",[],["67","68"],"/home/roque/projects/electron/src/App.js",[],"/home/roque/projects/electron/src/pages/Home.js",["69"],"import {Alert, Button, Modal, TextField,} from \"@f-ui/core\";\nimport styles from './styles/Home.module.css'\nimport React, {useContext, useEffect, useRef, useState} from \"react\";\n\nimport LoadProvider from \"../views/editor/hook/LoadProvider\";\nimport EVENTS from \"../views/editor/utils/misc/EVENTS\";\nimport randomID from \"../views/editor/utils/misc/randomID\";\nimport Maker from \"../services/workers/Maker\";\nimport Projects from \"../components/projects/Projects\";\nimport ThemeProvider from \"../views/editor/hook/ThemeProvider\";\nimport PropTypes from \"prop-types\";\nimport logo from '../static/LOGO.png'\nimport gitDark from '../static/github/dark.svg'\nimport gitLight from '../static/github/light.svg'\nimport Database from \"../components/db/Database\";\n// import Database from \"../components/db/Database\";\n\n\nexport default function Home(props) {\n    const [projects, setProjects] = useState([])\n    const [openModal, setOpenModal] = useState(false)\n    const [projectName, setProjectName] = useState('')\n    const [alert, setAlert] = useState({})\n\n    const [database, setDatabase] = useState()\n    const load = useContext(LoadProvider)\n    const uploadRef = useRef()\n    const theme = useContext(ThemeProvider)\n    const refresh = (db) => {\n        db?.listProject()\n            .then(res => {\n                window.alert(res)\n                setProjects(res.map(re => {\n                    return {\n                        ...re,\n                        meta: JSON.parse(re.meta),\n                        settings: JSON.parse(re.settings)\n                    }\n                }))\n                load.finishEvent(EVENTS.PROJECT_LIST)\n            })\n    }\n\n    useEffect(() => {\n\n        load.pushEvent(EVENTS.PROJECT_LIST)\n        load.finishEvent(EVENTS.PROJECT_SETTINGS)\n\n        const db = new Database('FS')\n        setDatabase(db)\n        refresh(db)\n    }, [])\n\n\n    return (\n        <div className={styles.wrapper}>\n\n            <Alert open={alert.type !== undefined} variant={alert.type} handleClose={() => setAlert({})}>\n                <div style={{color: 'var(--fabric-color-primary)'}}>\n                    {alert.message}\n                </div>\n            </Alert>\n            <Modal open={openModal} handleClose={() => {\n                setProjectName('')\n                setOpenModal(false)\n            }} className={styles.modal}>\n                <TextField\n                    handleChange={e => setProjectName(e.target.value)}\n                    label={'Project name'}\n                    placeholder={'Project name'}\n                    value={projectName} size={'small'}/>\n                <Button\n                    variant={'filled'}\n                    disabled={projectName === ''}\n                    className={styles.submitButton}\n                    onClick={() => {\n                        const now = (new Date()).toDateString()\n                        const newData = {\n                            id: randomID(),\n                            meta: JSON.stringify({\n                                lastModification: now,\n                                entities: 0,\n                                meshes: 0,\n                                materials: 0\n                            }),\n                            settings: JSON.stringify({\n                                projectName: projectName\n                            })\n                        }\n\n                        database?.postProject(newData)\n                            .then(r => {\n\n                                setAlert({\n                                    type: 'success',\n                                    message: 'Project created.'\n                                })\n                                setProjects(prev => {\n                                    return [...prev, {\n                                        ...newData,\n                                        settings: JSON.parse(newData.settings),\n                                        meta: JSON.parse(newData.meta)\n                                    }]\n                                })\n                                setProjectName('')\n                                setOpenModal(false)\n                            })\n                    }}>\n                    Create project\n                </Button>\n            </Modal>\n            <div className={styles.options}>\n                <div className={styles.logoWrapper}>\n                    <div className={styles.logo}>\n                        <img src={logo} alt={'logo'}/>\n                    </div>\n                    <div className={styles.logoTitle}>\n                        Projection Engine\n                    </div>\n                </div>\n\n                <div style={{display: 'flex', gap: '4px'}}>\n                    <Button onClick={() => theme.setDark(!theme.dark)} className={styles.button} variant={'outlined'}>\n                        <span className={'material-icons-round'}>{theme.dark ? 'dark_mode' : 'light_mode'}</span>\n                    </Button>\n\n                    <Button onClick={() => window.open('https://github.com/projection-engine')}\n                            className={styles.button}\n                            variant={'outlined'}>\n                        <img style={{width: '30px'}} alt={'github'}\n                             src={theme.dark ? gitDark : gitLight}/>\n                    </Button>\n\n                </div>\n            </div>\n\n            <input style={{display: 'none'}}\n                   type={'file'}\n                   accept={['.projection']}\n                   onChange={f => {\n                       load.pushEvent(EVENTS.PROJECT_IMPORT)\n                       Maker.parse(f.target.files[0], database)\n                           .then((res) => {\n                               let promises = []\n                               const pj = res.find(data => data.type === 0)\n\n                               if (!projects.find(p => p.id === JSON.parse(pj.data).id)) {\n                                   res.forEach(data => {\n                                       const parsed = JSON.parse(data.data)\n\n                                       if (data.type === 0)\n                                           promises.push(new Promise(resolve => {\n                                               database?.postProject({\n                                                   id: parsed.id,\n                                                   settings: parsed.settings,\n                                                   meta: parsed.meta\n                                               }).then(() => resolve()).catch(() => resolve())\n                                           }))\n                                       else if (data.type === 1)\n                                           promises.push(new Promise(resolve => {\n                                               database?.postFileWithBlob(parsed, parsed.blob).then(() => resolve()).catch(() => resolve())\n                                           }))\n                                       else if (data.type === 2) {\n                                           promises.push(new Promise(resolve => database?.postEntity(parsed).then(() => resolve()).catch(() => resolve())))\n                                       }\n                                   })\n                                   Promise.all(promises).then(() => {\n                                       load.finishEvent(EVENTS.PROJECT_IMPORT)\n                                       refresh(database)\n                                   })\n                               } else {\n                                   load.finishEvent(EVENTS.PROJECT_IMPORT)\n                                   setAlert({\n                                       type: 'error',\n                                       message: 'Project already exists.'\n                                   })\n                               }\n\n                           })\n                       f.target.value = ''\n                   }}\n                   ref={uploadRef}/>\n\n            <Projects\n                onNew={() => setOpenModal(true)}\n                onLoad={() => uploadRef.current.click()}\n                database={database}\n\n                refresh={() => refresh(database)} load={load} projects={projects}\n                redirect={id => {\n                    props.redirect(id)\n                }}\n                setProjects={setProjects}/>\n        </div>\n    )\n}\n\nHome.propTypes = {\n    redirect: PropTypes.func.isRequired\n}","/home/roque/projects/electron/src/components/loader/useLoading.js",["70","71"],"import {useEffect, useReducer, useRef} from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport Loader from \"./Loader\";\r\n\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'ADD':\r\n            return {...state, [action.payload]: true}\r\n        case 'DELETE':\r\n            const copy = {...state}\r\n            delete copy[action.payload]\r\n\r\n            return copy\r\n    }\r\n}\r\n\r\n\r\nexport default function useLoading(dark,accentColor) {\r\n    const [events, dispatchEvents] = useReducer(reducer, {})\r\n    const renderTarget = useRef()\r\n\r\n    useEffect(() => {\r\n        if (!renderTarget.current) {\r\n            renderTarget.current = document.createElement('div')\r\n            document.body.appendChild(renderTarget.current)\r\n        }\r\n        if (Object.keys(events).length > 0)\r\n            ReactDOM.render(<Loader accentColor={accentColor} events={events} dark={dark}/>, renderTarget.current)\r\n        else\r\n            ReactDOM.unmountComponentAtNode(renderTarget.current)\r\n\r\n    }, [events,dark])\r\n\r\n    const pushEvent = (key) => {\r\n        dispatchEvents({type: 'ADD', payload: key})\r\n    }\r\n    const getEvent = (key) => {\r\n        return !events[key]\r\n    }\r\n    const finishEvent = (key) => {\r\n        dispatchEvents({type: 'DELETE', payload: key})\r\n    }\r\n\r\n    return {\r\n        dispatchEvents,\r\n\r\n        events,\r\n        pushEvent,\r\n        getEvent,\r\n        finishEvent\r\n    }\r\n}\r\n\r\n","/home/roque/projects/electron/src/views/editor/hook/LoadProvider.js",[],"/home/roque/projects/electron/src/views/editor/hook/useGlobalOptions.js",[],"/home/roque/projects/electron/src/views/editor/hook/ThemeProvider.js",[],"/home/roque/projects/electron/src/views/editor/utils/misc/EVENTS.js",["72"],"export default {\r\n    PROJECT_SETTINGS: 'Project settings',\r\n    PROJECT_DATA: \"Scene data\",\r\n    PROJECT_DELETE: \"Deleting project\",\r\n    PROJECT_LIST: \"Projects\",\r\n    PROJECT_SAVE: \"Saving project\",\r\n    PROJECT_FILES: \"Project files\",\r\n    PROJECT_IMPORT: \"Importing project\",\r\n\r\n    UPDATE_FILE: \"Updating file\",\r\n    DELETE_FILE: \"Deleting file\",\r\n    LOAD_FILE: \"Loading file\",\r\n    MOVE_FILE: \"Moving file\",\r\n    IMPORT_FILE: \"Importing files\",\r\n\r\n\r\n    DELETE_FOLDER: 'Deleting folder',\r\n\r\n    SKYBOX: \"Skybox\",\r\n    MESH: \"Mesh\",\r\n    MATERIAL: \"Material\",\r\n\r\n    REFRESHING: 'Refreshing files',\r\n    LOADING_VIEWPORT: 'Loading viewport',\r\n    PACKAGING_DATA: 'Packaging data for download.',\r\n    LOADING_MATERIAL: 'Loading material'\r\n}\r\n","/home/roque/projects/electron/src/views/editor/utils/misc/randomID.js",[],"/home/roque/projects/electron/src/services/workers/Maker.js",[],"/home/roque/projects/electron/src/components/projects/Projects.jsx",["73"],"import styles from \"./styles/Projects.module.css\";\r\nimport EVENTS from \"../../views/editor/utils/misc/EVENTS\";\r\nimport PropTypes from 'prop-types'\r\nimport React, {useState} from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport {Button} from \"@f-ui/core\";\r\n\r\nexport default function Projects(props) {\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.title}>\r\n                Your projects\r\n              <div style={{display: 'flex', gap: '4px'}}>\r\n                  <Button\r\n                      className={styles.button}\r\n                      variant={'outlined'}\r\n                      onClick={() => props.onLoad()}>\r\n                      Load project\r\n                  </Button>\r\n                  <Button\r\n                      className={styles.button}\r\n                      variant={'filled'}\r\n                      onClick={() => props.onNew()}>\r\n                      New project\r\n                  </Button>\r\n              </div>\r\n            </div>\r\n            <div className={styles.content}>\r\n                {props.projects.map((p, i)=> (\r\n                <React.Fragment key={p.id}>\r\n                    <Card\r\n                        onClick={() => props.redirect('/project?id=' + p.id)}\r\n                        data={p} index={i}\r\n                        onRename={newName  => {\r\n                            // props.database.updateProject(p.id, {settings: JSON.stringify({...p.settings, projectName: newName})})\r\n                        }}\r\n                        onDelete={() => {\r\n                            props.load.pushEvent(EVENTS.PROJECT_DELETE)\r\n                            // props.database.deleteProject(p.id)\r\n                            //     .then(() => {\r\n                            //         props.load.finishEvent(EVENTS.PROJECT_DELETE)\r\n                            //         props.refresh()\r\n                            //     })\r\n                            //     .catch(() => {\r\n                            //         props.load.finishEvent(EVENTS.PROJECT_DELETE)\r\n                            //     })\r\n\r\n                        }}/>\r\n                </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nProjects.propTypes = {\r\n    onLoad: PropTypes.func,\r\n    onNew: PropTypes.func,\r\n    refresh: PropTypes.func,\r\n    database: PropTypes.object,\r\n    load: PropTypes.object,\r\n    redirect: PropTypes.func,\r\n    projects: PropTypes.array,\r\n    setProjects: PropTypes.func\r\n}","/home/roque/projects/electron/src/components/loader/Loader.jsx",[],"/home/roque/projects/electron/src/views/editor/utils/misc/randomInRange.js",[],"/home/roque/projects/electron/src/components/projects/components/Card.jsx",[],"/home/roque/projects/electron/src/components/db/Database.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":52,"column":8,"nodeType":"80","endLine":52,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":7,"column":5,"nodeType":"84","messageId":"85","endLine":15,"endColumn":6},{"ruleId":"78","severity":1,"message":"86","line":33,"column":8,"nodeType":"80","endLine":33,"endColumn":21,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":1,"nodeType":"90","endLine":27,"endColumn":2},{"ruleId":"91","severity":1,"message":"92","line":4,"column":16,"nodeType":"93","messageId":"94","endLine":4,"endColumn":24},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'load' and 'refresh'. Either include them or remove the dependency array.","ArrayExpression",["97"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'accentColor'. Either include it or remove the dependency array.",["98"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [load, refresh]",{"range":"103","text":"104"},"Update the dependencies array to be: [events, dark, accentColor]",{"range":"105","text":"106"},[1859,1861],"[load, refresh]",[1011,1024],"[events, dark, accentColor]"]